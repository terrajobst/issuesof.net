@page "/areas"
@using System.Text
@using IssueDb

<IndexStatus />

<form>
    <div class="form-group">
        <input type="text" class="form-control" placeholder="Search" @bind="Filter" @bind:event="oninput" />
    </div>
</form>

<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th>Area</th>
            <th>Open</th>
            <th>Leads</th>
            <th>Owners</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in Entries)
        {
            void WriteUserList(IEnumerable<AreaMember> members)
            {
                if (!members.Any())
                    return;

                <div class="d-flex flex-wrap" style="gap: .3rem;">
                    @foreach (var member in members)
                    {
                        var muted = member.Origin is AreaMemberOrigin.Composite ? "text-muted" : null;
                        var description = ConvertOriginToText(member.Origin);
                        <a class="font-weight-bold @muted" title="@description" href="https://github.com/@member.UserName">@@@member.UserName</a>
                    }
                </div>
            }

            void WriteUserListGrouped(IEnumerable<AreaMember> members)
            {
                var primaries = members.Where(m => m.Origin is not AreaMemberOrigin.Composite);
                var secondaries = members.Where(m => m.Origin is AreaMemberOrigin.Composite);
                WriteUserList(primaries);
                WriteUserList(secondaries);
            }

            static string ConvertOriginToText(AreaMemberOrigin origin)
            {
                switch (origin)
                {
                    case AreaMemberOrigin.Composite c:
                        var sb = new StringBuilder();
                        foreach (var nested in c.Origins)
                            sb.AppendLine(ConvertOriginToText(nested));
                        return sb.ToString();
                    case AreaMemberOrigin.File f:
                        return $"Listed in {f.OrgName}/{f.RepoName}/{f.Path}:{f.LineNumber}";
                    case AreaMemberOrigin.Team t:
                        return $"Member of {t.OrgName}/{t.TeamName}";
                    default:
                        return $"Unknown origin {origin}";
                }
            }

            <tr>
                <td>
                    <div class="d-flex flex-wrap" style="gap: .3rem;" title="@entry.Area">
                        @{
                            var elements = TextTokenizer.GetAreaPaths("area-" + entry.Area, segmentsOnly: true);

                            for (var i = 0; i < elements.Count; i++)
                            {
                                if (i > 0)
                                {
                                    <span class="mx-1 text-muted">/</span>
                                }

                                <text>@elements[i]</text>
                            }
                        }
                    </div>
                </td>
                <td>
                    @{
                        var info = AreaQueryInfos[entry];
                    }
                    <a href="@info.Url">
                        <div class="d-flex flex-row align-items-center">
                            <span class="iconify mr-2" data-icon="octicon:issue-opened-16" data-inline="false" title="Open Issues"></span>
                            @info.IssueCount
                        </div>
                    </a>
                </td>
                <td>
                    @{ WriteUserListGrouped(entry.Leads); }
                </td>
                <td>
                    @{ WriteUserListGrouped(entry.Owners); }
                </td>
            </tr>
        }
    </tbody>
</table>
