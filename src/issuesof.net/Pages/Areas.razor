@page "/areas"
@using System.Text
@using IssueDb

<IndexStatus />

<form>
    <div class="form-group">
        <input type="text" class="form-control" placeholder="Search" @bind="Filter" @bind:event="oninput" />
    </div>
</form>

@{
    var mappedCss = ShowUnmapped ? "" : "active";
    var unmappedCss = AreaInfoService.UnmappedAreaInfos.IsEmpty
                            ? "disabled"
                            : ShowUnmapped
                                ? "active"
                                : "";
}

<ul class="nav nav-tabs">
  <li class="nav-item">
    <a class="nav-link @mappedCss" href="#" @onclick:preventDefault="true" @onclick="() => ShowUnmapped = false">Mapped</a>
  </li>
  <li class="nav-item">
    <a class="nav-link @unmappedCss" href="#" @onclick:preventDefault="true" @onclick="() => ShowUnmapped = true">Unmapped</a>
  </li>
</ul>

@{
    void WriteOpenLink(int issueCount, string url)
    {
        <a href="@url">
            <div class="d-flex flex-row align-items-center">
                <span class="iconify mr-2" data-icon="octicon:issue-opened-16" data-inline="false" title="Open Issues"></span>
                @issueCount
            </div>
        </a>        
    }
}

@if (!ShowUnmapped)
{
<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th>Area</th>
            <th>Open</th>
            <th>Leads</th>
            <th>Owners</th>
            <th>Definitions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var info in Entries)
        {
            var entry = info.Entry;

            void WriteDefinitions(CrawledAreaEntry entry)
            {
                if (!entry.Definitions.Any())
                    return;

                <div class="d-flex flex-wrap" style="gap: .3rem;">
                    @foreach (var file in entry.Definitions)
                    {
                        <a href="@file.ToUrl()">@file.OrgName/@file.RepoName</a>
                    }
                </div>
            }

            void WriteUserList(IEnumerable<CrawledAreaMember> members)
            {
                if (!members.Any())
                    return;

                <div class="d-flex flex-wrap" style="gap: .3rem;">
                    @foreach (var member in members)
                    {
                        var boldOrMuted = member.IsPrimary ? "font-weight-bold" : "text-muted";
                        var description = ConvertOriginToText(member.Origin);
                        <a class="@boldOrMuted" title="@description" href="@member.ToUrl()">@@@member.UserName</a>
                    }
                </div>
            }

            void WriteUserListGrouped(IEnumerable<CrawledAreaMember> members)
            {
                var primaries = members.Where(m => m.IsPrimary);
                var secondaries = members.Where(m => !m.IsPrimary);
                WriteUserList(primaries);
                WriteUserList(secondaries);
            }

            static string ConvertOriginToText(CrawledAreaMemberOrigin origin)
            {
                switch (origin)
                {
                    case CrawledAreaMemberOrigin.Composite c:
                        var sb = new StringBuilder();
                        foreach (var nested in c.Origins)
                            sb.AppendLine(ConvertOriginToText(nested));
                        return sb.ToString();
                    case CrawledAreaMemberOrigin.File f:
                        return $"Listed in {f.ToShortString()}";
                    case CrawledAreaMemberOrigin.Team t:
                        return $"Member of {t.OrgName}/{t.TeamName}";
                    default:
                        return $"Unknown origin {origin}";
                }
            }

            <tr>
                <td>
                    <div class="d-flex" style="gap: .3rem;" title="@entry.Label">
                        @{
                            var elements = TextTokenizer.GetAreaPaths("area-" + entry.Area, segmentsOnly: true);

                            for (var i = 0; i < elements.Count; i++)
                            {
                                if (i > 0)
                                {
                                    <span class="mx-1 text-muted">/</span>
                                }

                                <text>@elements[i]</text>
                            }
                        }
                    </div>
                </td>
                <td>
                    @{ WriteOpenLink(info.IssueCount, info.Url); }
                </td>
                <td>
                    @{ WriteUserListGrouped(entry.Leads); }
                </td>
                <td>
                    @{ WriteUserListGrouped(entry.Owners); }
                </td>
                <td>
                    @{ WriteDefinitions(entry); }
                </td>
            </tr>
        }
    </tbody>
</table>
}
else
{
<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th>Label</th>
            <th>Open</th>
            <th>Repos</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var info in UnmappedEntries)
        {
            <tr>
                <td>
                    @info.Label
                </td>
                <td>
                    @{ WriteOpenLink(info.IssueCount, info.Url); }
                </td>
                <td>
                    <div class="d-flex flex-wrap" style="gap: .3rem;">
                        @foreach (var repo in info.Repos)
                        {
                            <a href="https://github.com/@repo">@repo</a>
                        }
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>    
}