// Generated by Snowball 2.2.0 - https://snowballstem.org/

#pragma warning disable 0164
#pragma warning disable 0162

namespace Snowball
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class implements the stemming algorithm defined by a snowball script.
    ///  Generated by Snowball 2.2.0 - https://snowballstem.org/
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "2.2.0")]
    public partial class GermanStemmer : Stemmer
    {
        private int I_x;
        private int I_p2;
        private int I_p1;

        private const string g_v = "aeiouy\u00E4\u00F6\u00FC";
        private const string g_s_ending = "bdfghklmnrt";
        private const string g_st_ending = "bdfghklmnt";
        private static readonly Among[] a_0 = new[] 
        {
            new Among("", -1, 5),
            new Among("U", 0, 2),
            new Among("Y", 0, 1),
            new Among("\u00E4", 0, 3),
            new Among("\u00F6", 0, 4),
            new Among("\u00FC", 0, 2)
        };

        private static readonly Among[] a_1 = new[] 
        {
            new Among("e", -1, 2),
            new Among("em", -1, 1),
            new Among("en", -1, 2),
            new Among("ern", -1, 1),
            new Among("er", -1, 1),
            new Among("s", -1, 3),
            new Among("es", 5, 2)
        };

        private static readonly Among[] a_2 = new[] 
        {
            new Among("en", -1, 1),
            new Among("er", -1, 1),
            new Among("st", -1, 2),
            new Among("est", 2, 1)
        };

        private static readonly Among[] a_3 = new[] 
        {
            new Among("ig", -1, 1),
            new Among("lich", -1, 1)
        };

        private static readonly Among[] a_4 = new[] 
        {
            new Among("end", -1, 1),
            new Among("ig", -1, 2),
            new Among("ung", -1, 1),
            new Among("lich", -1, 3),
            new Among("isch", -1, 2),
            new Among("ik", -1, 2),
            new Among("heit", -1, 3),
            new Among("keit", -1, 4)
        };



        private bool r_prelude()
        {
            {
                int c1 = cursor;
                while (true)
                {
                    int c2 = cursor;
                    {
                        int c3 = cursor;
                        bra = cursor;
                        if (!(eq_s("\u00DF")))
                        {
                            goto lab2;
                        }
                        ket = cursor;
                        slice_from("ss");
                        goto lab1;
                    lab2: ; 
                        cursor = c3;
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                    }
                lab1: ; 
                    continue;
                lab0: ; 
                    cursor = c2;
                    break;
                }
                cursor = c1;
            }
            while (true)
            {
                int c4 = cursor;
                while (true)
                {
                    int c5 = cursor;
                    if (in_grouping(g_v, 97, 252, false) != 0)
                    {
                        goto lab4;
                    }
                    bra = cursor;
                    {
                        int c6 = cursor;
                        if (!(eq_s("u")))
                        {
                            goto lab6;
                        }
                        ket = cursor;
                        if (in_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab6;
                        }
                        slice_from("U");
                        goto lab5;
                    lab6: ; 
                        cursor = c6;
                        if (!(eq_s("y")))
                        {
                            goto lab4;
                        }
                        ket = cursor;
                        if (in_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab4;
                        }
                        slice_from("Y");
                    }
                lab5: ; 
                    cursor = c5;
                    break;
                lab4: ; 
                    cursor = c5;
                    if (cursor >= limit)
                    {
                        goto lab3;
                    }
                    cursor++;
                }
                continue;
            lab3: ; 
                cursor = c4;
                break;
            }
            return true;
        }

        private bool r_mark_regions()
        {
            I_p1 = limit;
            I_p2 = limit;
            {
                int c1 = cursor;
                {
                    int c = cursor + 3;
                    if (c > limit)
                    {
                        return false;
                    }
                    cursor = c;
                }
                I_x = cursor;
                cursor = c1;
            }
            {

                int ret = out_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return false;
                }

                cursor += ret;
            }
            {

                int ret = in_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return false;
                }

                cursor += ret;
            }
            I_p1 = cursor;
            if (!(I_p1 < I_x))
            {
                goto lab0;
            }
            I_p1 = I_x;
        lab0: ; 
            {

                int ret = out_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return false;
                }

                cursor += ret;
            }
            {

                int ret = in_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return false;
                }

                cursor += ret;
            }
            I_p2 = cursor;
            return true;
        }

        private bool r_postlude()
        {
            int among_var;
            while (true)
            {
                int c1 = cursor;
                bra = cursor;
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    goto lab0;
                }
                ket = cursor;
                switch (among_var) {
                    case 1:
                        slice_from("y");
                        break;
                    case 2:
                        slice_from("u");
                        break;
                    case 3:
                        slice_from("a");
                        break;
                    case 4:
                        slice_from("o");
                        break;
                    case 5:
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }
            return true;
        }

        private bool r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return false;
            }
            return true;
        }

        private bool r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return false;
            }
            return true;
        }

        private bool r_standard_suffix()
        {
            int among_var;
            {
                int c1 = limit - cursor;
                ket = cursor;
                among_var = find_among_b(a_1);
                if (among_var == 0)
                {
                    goto lab0;
                }
                bra = cursor;
                if (!r_R1())
                    goto lab0;
                switch (among_var) {
                    case 1:
                        slice_del();
                        break;
                    case 2:
                        slice_del();
                        {
                            int c2 = limit - cursor;
                            ket = cursor;
                            if (!(eq_s_b("s")))
                            {
                                {
                                    cursor = limit - c2;
                                    goto lab1;
                                }
                            }
                            bra = cursor;
                            if (!(eq_s_b("nis")))
                            {
                                {
                                    cursor = limit - c2;
                                    goto lab1;
                                }
                            }
                            slice_del();
                        lab1: ; 
                        }
                        break;
                    case 3:
                        if (in_grouping_b(g_s_ending, 98, 116, false) != 0)
                        {
                            goto lab0;
                        }
                        slice_del();
                        break;
                }
            lab0: ; 
                cursor = limit - c1;
            }
            {
                int c3 = limit - cursor;
                ket = cursor;
                among_var = find_among_b(a_2);
                if (among_var == 0)
                {
                    goto lab2;
                }
                bra = cursor;
                if (!r_R1())
                    goto lab2;
                switch (among_var) {
                    case 1:
                        slice_del();
                        break;
                    case 2:
                        if (in_grouping_b(g_st_ending, 98, 116, false) != 0)
                        {
                            goto lab2;
                        }
                        {
                            int c = cursor - 3;
                            if (c < limit_backward)
                            {
                                goto lab2;
                            }
                            cursor = c;
                        }
                        slice_del();
                        break;
                }
            lab2: ; 
                cursor = limit - c3;
            }
            {
                int c4 = limit - cursor;
                ket = cursor;
                among_var = find_among_b(a_4);
                if (among_var == 0)
                {
                    goto lab3;
                }
                bra = cursor;
                if (!r_R2())
                    goto lab3;
                switch (among_var) {
                    case 1:
                        slice_del();
                        {
                            int c5 = limit - cursor;
                            ket = cursor;
                            if (!(eq_s_b("ig")))
                            {
                                {
                                    cursor = limit - c5;
                                    goto lab4;
                                }
                            }
                            bra = cursor;
                            {
                                int c6 = limit - cursor;
                                if (!(eq_s_b("e")))
                                {
                                    goto lab5;
                                }
                                {
                                    cursor = limit - c5;
                                    goto lab4;
                                }
                            lab5: ; 
                                cursor = limit - c6;
                            }
                            if (!r_R2())
                                {
                                    cursor = limit - c5;
                                    goto lab4;
                                }
                            slice_del();
                        lab4: ; 
                        }
                        break;
                    case 2:
                        {
                            int c7 = limit - cursor;
                            if (!(eq_s_b("e")))
                            {
                                goto lab6;
                            }
                            goto lab3;
                        lab6: ; 
                            cursor = limit - c7;
                        }
                        slice_del();
                        break;
                    case 3:
                        slice_del();
                        {
                            int c8 = limit - cursor;
                            ket = cursor;
                            {
                                int c9 = limit - cursor;
                                if (!(eq_s_b("er")))
                                {
                                    goto lab9;
                                }
                                goto lab8;
                            lab9: ; 
                                cursor = limit - c9;
                                if (!(eq_s_b("en")))
                                {
                                    {
                                        cursor = limit - c8;
                                        goto lab7;
                                    }
                                }
                            }
                        lab8: ; 
                            bra = cursor;
                            if (!r_R1())
                                {
                                    cursor = limit - c8;
                                    goto lab7;
                                }
                            slice_del();
                        lab7: ; 
                        }
                        break;
                    case 4:
                        slice_del();
                        {
                            int c10 = limit - cursor;
                            ket = cursor;
                            if (find_among_b(a_3) == 0)
                            {
                                {
                                    cursor = limit - c10;
                                    goto lab10;
                                }
                            }
                            bra = cursor;
                            if (!r_R2())
                                {
                                    cursor = limit - c10;
                                    goto lab10;
                                }
                            slice_del();
                        lab10: ; 
                        }
                        break;
                }
            lab3: ; 
                cursor = limit - c4;
            }
            return true;
        }

        protected override bool stem()
        {
            {
                int c1 = cursor;
                r_prelude();
                cursor = c1;
            }
            {
                int c2 = cursor;
                r_mark_regions();
                cursor = c2;
            }
            limit_backward = cursor;
            cursor = limit;
            r_standard_suffix();
            cursor = limit_backward;
            {
                int c4 = cursor;
                r_postlude();
                cursor = c4;
            }
            return true;
        }

    }
}

